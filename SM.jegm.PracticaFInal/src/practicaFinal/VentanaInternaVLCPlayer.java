/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;

import com.github.sarxos.webcam.WebcamException;
import java.awt.image.BufferedImage;
import java.io.File;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;

/**
 * Clase que representa una ventana interna relacionada con el video (elemento multimedia en general).
 *
 * @author juane
 */
public class VentanaInternaVLCPlayer extends VentanaInterna {

    private EmbeddedMediaPlayer vlcPlayer;
    private File fMedia;

    /**
     * Creates new form VentanaInternaSound
     *
     * @param vp Ventana principal padre
     */
    private VentanaInternaVLCPlayer(VentanaPrincipal vp, File f) {
        super(vp);
        initComponents();

        try {
            fMedia = f;
            EmbeddedMediaPlayerComponent aVisual = new EmbeddedMediaPlayerComponent();
            getContentPane().add(aVisual, java.awt.BorderLayout.CENTER);
            vlcPlayer = aVisual.getMediaPlayer();
        } catch (WebcamException ex) {
            System.err.println("Error creating video windows..");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Webcam: " + this.NUMERADOR);
        setMinimumSize(new java.awt.Dimension(150, 40));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(600, 500));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        stop();
    }//GEN-LAST:event_formInternalFrameClosing

    public static VentanaInternaVLCPlayer getInstance(VentanaPrincipal vp, File f) {
        VentanaInternaVLCPlayer v = new VentanaInternaVLCPlayer(vp, f);
        return (v.vlcPlayer != null ? v : null);
    }

    /**
     * Empieza la reproducción
     */
    public void play() {
        if (vlcPlayer != null) {
            if (vlcPlayer.isPlayable()) {
                //Si se estaba reproduciendo 
                vlcPlayer.play();
            } else {
                vlcPlayer.playMedia(fMedia.getAbsolutePath());
            }
        }
    }

    /**
     * Detiene la reproducción
     */
    public void stop() {
        if (vlcPlayer != null) {
            if (vlcPlayer.isPlaying()) {
                vlcPlayer.pause();
            } else {
                vlcPlayer.stop();
                //vlcPlayer = null;
            }
        }
    }
    
    /**
     * Captura una imagen desde video
     * @return Imagen capturada
     */
    public BufferedImage getImage() {
        if (vlcPlayer != null) {
            if (vlcPlayer.isPlaying()) {
                return vlcPlayer.getVideoSurfaceContents();
            }
        }
        return null;
    }

    public void addMediaPlayerEventListener(MediaPlayerEventListener ml) {
        if (vlcPlayer != null) {
            vlcPlayer.addMediaPlayerEventListener(ml);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
