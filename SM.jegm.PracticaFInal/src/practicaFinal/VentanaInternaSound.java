/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.Timer;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;

/**
 * @deprecated Clase que representa una ventana interna relacionada con el sonido.
 * En próximas versiones será eliminada, por la inserción del panel de sonido directamente
 * en la ventana principal.
 * @author juane
 */
public class VentanaInternaSound extends VentanaInterna {

    private SMPlayer audioPlayer;
    private Timer audioTimer;
    private long duration;

    /**
     * Creates new form VentanaInternaSound
     * 
     * @param vp Ventana padre
     * @param f Archivo de sonido asociado a la ventana de sonido
     */
    public VentanaInternaSound(VentanaPrincipal vp, File f) {
        super(vp);
        initComponents();

        audioPlayer = new SMClipPlayer(f);

        // Get audio duration
        try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(f);
            AudioFormat format = audioInputStream.getFormat();
            long frames = audioInputStream.getFrameLength();
            this.duration = 1000 * (int) ((frames + 0.) / format.getFrameRate());
            jLabelTotalTime.setText(formatSeconds(this.duration));
            this.jProgressBar.setMinimum(0);
            this.jProgressBar.setMaximum((int) (this.duration - 1));

        } catch (UnsupportedAudioFileException | IOException ex) {
            System.err.println("Error in audio windows..");
        }
    }

    /**
     * Formatea milisegundos a la forma xx:xx
     *
     * @param miliSeconds milisegundos a convertir
     * @return String de milisegundos formateada
     */
    private String formatSeconds(long miliSeconds) {

        long seconds = miliSeconds / 1000;

        long minutes = (seconds % 3600) / 600;
        seconds %= 600;

        return String.format("%02d:%02d", minutes, seconds);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jToggleButtonPlay = new javax.swing.JToggleButton();
        jToggleButtonStop = new javax.swing.JToggleButton();
        jToggleButtonRecord = new javax.swing.JToggleButton();
        jLabelElapsedTime = new javax.swing.JLabel();
        jLabelTotalTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Audio: " + this.NUMERADOR);
        setMinimumSize(new java.awt.Dimension(150, 40));
        setName(""); // NOI18N
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().add(jProgressBar, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(200, 33));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jToggleButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practicaFinal/iconos/play24x24.png"))); // NOI18N
        jToggleButtonPlay.setToolTipText("Play");
        jToggleButtonPlay.setPreferredSize(new java.awt.Dimension(30, 33));
        jToggleButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPlayActionPerformed(evt);
            }
        });
        jPanel1.add(jToggleButtonPlay);

        jToggleButtonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practicaFinal/iconos/stop24x24.png"))); // NOI18N
        jToggleButtonStop.setToolTipText("Stop");
        jToggleButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonStopActionPerformed(evt);
            }
        });
        jPanel1.add(jToggleButtonStop);

        jToggleButtonRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practicaFinal/iconos/record24x24.png"))); // NOI18N
        jToggleButtonRecord.setToolTipText("Stop");
        jToggleButtonRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRecordActionPerformed(evt);
            }
        });
        jPanel1.add(jToggleButtonRecord);

        jLabelElapsedTime.setText("00:00");
        jPanel1.add(jLabelElapsedTime);

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        jLabelTotalTime.setText("99:99");
        getContentPane().add(jLabelTotalTime, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRecordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButtonRecordActionPerformed

    private void jToggleButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonStopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButtonStopActionPerformed

    private void jToggleButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPlayActionPerformed
        if (!this.jToggleButtonPlay.isSelected()) {
            stateReadyToPlay();
        } else {
            this.audioPlayer.play();
            this.audioTimer = new Timer(1, new ActionListener() {
                private int elapsedMiliSeconds = 1;

                @Override
                public void actionPerformed(ActionEvent e) {
                    jLabelElapsedTime.setText(formatSeconds(elapsedMiliSeconds));
                    jProgressBar.setValue(elapsedMiliSeconds);
                    elapsedMiliSeconds++;

                    if (elapsedMiliSeconds > duration) {
                        stateReadyToPlay();
                        jToggleButtonPlay.setSelected(false);
                    }

                }
            });
            audioTimer.start();
            jToggleButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PFinal/pausa24x24.png")));
            jToggleButtonPlay.setToolTipText("Pause");
        }
    }//GEN-LAST:event_jToggleButtonPlayActionPerformed

    /**
     * Volver al estado de preparado para reproducir
     */
    private void stateReadyToPlay() {
        jToggleButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PFinal/play24x24.png")));
        jToggleButtonPlay.setToolTipText("Play");
        jLabelElapsedTime.setText("00:00");
        this.jProgressBar.setValue(0);
        this.audioTimer.stop();
        this.audioPlayer.stop();
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelElapsedTime;
    private javax.swing.JLabel jLabelTotalTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JToggleButton jToggleButtonPlay;
    private javax.swing.JToggleButton jToggleButtonRecord;
    private javax.swing.JToggleButton jToggleButtonStop;
    // End of variables declaration//GEN-END:variables
}
